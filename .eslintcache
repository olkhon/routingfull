[{"C:\\Users\\alexa\\Desktop\\WBS\\routingfull\\src\\index.js":"1","C:\\Users\\alexa\\Desktop\\WBS\\routingfull\\src\\App.js":"2","C:\\Users\\alexa\\Desktop\\WBS\\routingfull\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":4476,"mtime":1610538570577,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"189rjp3",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\alexa\\Desktop\\WBS\\routingfull\\src\\index.js",[],["16","17"],"C:\\Users\\alexa\\Desktop\\WBS\\routingfull\\src\\App.js",["18","19","20","21"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./styles.scss\";\n\nconst App = () => {\n  const [students, setStudents] = useState([]);\n\n  useEffect(() => {\n    const fetchStudents = async () => {\n      const students = await axios\n        .get(\"https://jsonplaceholder.typicode.com/users\")\n        .then(result => result.data);\n      return students;\n    };\n    fetchStudents().then(res => setStudents(res));\n  }, []);\n\n  const subjects = [\"React\", \"HTML\", \"CSS\", \"JS\"];\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <a className=\"link\" href=\"#\">\n          Students\n        </a>\n        <a className=\"link\" href=\"#\">\n          Student Results\n        </a>\n      </nav>\n      <div className=\"Instructions\">\n        <div className=\"block\">\n          For this exercise, you will have to:\n          <ol>\n            <li>\n              Install <b>react-router-dom</b>, then import BrowserRouter and\n              wrap your component tree with it (see previous exercises). Then\n              declare a router in App.js\n            </li>\n            <li>\n              Create a component named <em>{\"<Students>\"}</em> that will display\n              information about all the students. You can pass the prepared{\" \"}\n              <b>students</b> list as props. Clicking on the Students button in\n              the navbar should display all students and update the url to{\" \"}\n              <b>/students</b>\n            </li>\n            <li>\n              When one of the navbar item is selected, the text should be\n              highlighted in white.\n            </li>\n            <li>\n              It should be possible to click on the name of a single student\n              from the list in order to view the info regarding that specific\n              student. The URL should be updated accordingly to{\" \"}\n              <b>/students/someId</b>\n            </li>\n            <li>\n              Create a second component named <em>{\"<Results>\"}</em> that will\n              display <b>the students' grade for each subject</b>. You can pass\n              the prepared <b>students</b> and <b>subjects</b> lists as props.\n            </li>\n            <li>\n              <b>EXTRA:</b> It should be possible to click on the name of a\n              single student inside the results list, in order to view the\n              information for that specific student.\n            </li>\n            <li>\n              <b>EXTRA:</b> When I see a student's info, it should be possible\n              to click on a button that reads \"See results\". This button will\n              take me to /results/someId and I will see the results only for\n              that specific student\n            </li>\n            <li>\n              <b>EXTRA:</b> On the students or results page, I should have a\n              button. When I click on it, it will alert me \"Going back to the\n              main page\", and change the url to /. I should not use a Link or\n              NavLink here.\n            </li>\n          </ol>\n          <div>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://reacttraining.com/react-router/web/example/url-params\"\n            >\n              Help{\" \"}\n            </a>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://reacttraining.com/react-router/web/api/Hooks/useparams\"\n            >\n              Help{\" \"}\n            </a>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://reacttraining.com/react-router/web/api/NavLink\"\n            >\n              Help{\" \"}\n            </a>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://gomakethings.com/chaining-array-methods-in-vanilla-js/\"\n            >\n              Help{\" \"}\n            </a>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://reacttraining.com/react-router/web/api/history\"\n            >\n              Help{\" \"}\n            </a>\n          </div>\n        </div>\n\n        <div className=\"block\">\n          <em>Code here!</em>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\alexa\\Desktop\\WBS\\routingfull\\src\\reportWebVitals.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":6,"column":10,"nodeType":"28","messageId":"29","endLine":6,"endColumn":18},{"ruleId":"26","severity":1,"message":"30","line":18,"column":9,"nodeType":"28","messageId":"29","endLine":18,"endColumn":17},{"ruleId":"31","severity":1,"message":"32","line":23,"column":9,"nodeType":"33","endLine":23,"endColumn":38},{"ruleId":"31","severity":1,"message":"32","line":26,"column":9,"nodeType":"33","endLine":26,"endColumn":38},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'students' is assigned a value but never used.","Identifier","unusedVar","'subjects' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]